{
  "name": "WebGL2RenderingContextOverloads",
  "defined": {
    "spec": {
      "title": "WebGL 2.0 Specification",
      "url": "https://www.khronos.org/registry/webgl/specs/latest/2.0/"
    },
    "fragment": "interface mixin WebGL2RenderingContextOverloads\n{\n  // WebGL1:\n  void bufferData(GLenum target, GLsizeiptr size, GLenum usage);\n  void bufferData(GLenum target, [AllowShared] BufferSource? srcData, GLenum usage);\n  void bufferSubData(GLenum target, GLintptr dstByteOffset, [AllowShared] BufferSource srcData);\n  // WebGL2:\n  void bufferData(GLenum target, [AllowShared] ArrayBufferView srcData, GLenum usage, GLuint srcOffset,\n                  optional GLuint length = 0);\n  void bufferSubData(GLenum target, GLintptr dstByteOffset, [AllowShared] ArrayBufferView srcData,\n                     GLuint srcOffset, optional GLuint length = 0);\n\n  // WebGL1 legacy entrypoints:\n  void texImage2D(GLenum target, GLint level, GLint internalformat,\n                  GLsizei width, GLsizei height, GLint border, GLenum format,\n                  GLenum type, [AllowShared] ArrayBufferView? pixels);\n  void texImage2D(GLenum target, GLint level, GLint internalformat,\n                  GLenum format, GLenum type, TexImageSource source); // May throw DOMException\n\n  void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\n                     GLsizei width, GLsizei height,\n                     GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels);\n  void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\n                     GLenum format, GLenum type, TexImageSource source); // May throw DOMException\n\n  // WebGL2 entrypoints:\n  void texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\n                  GLint border, GLenum format, GLenum type, GLintptr pboOffset);\n  void texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\n                  GLint border, GLenum format, GLenum type,\n                  TexImageSource source); // May throw DOMException\n  void texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\n                  GLint border, GLenum format, GLenum type, [AllowShared] ArrayBufferView srcData,\n                  GLuint srcOffset);\n\n  void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width,\n                     GLsizei height, GLenum format, GLenum type, GLintptr pboOffset);\n  void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width,\n                     GLsizei height, GLenum format, GLenum type,\n                     TexImageSource source); // May throw DOMException\n  void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width,\n                     GLsizei height, GLenum format, GLenum type, [AllowShared] ArrayBufferView srcData,\n                     GLuint srcOffset);\n\n  void compressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width,\n                            GLsizei height, GLint border, GLsizei imageSize, GLintptr offset);\n  void compressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width,\n                            GLsizei height, GLint border, [AllowShared] ArrayBufferView srcData,\n                            optional GLuint srcOffset = 0, optional GLuint srcLengthOverride = 0);\n\n  void compressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\n                               GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLintptr offset);\n  void compressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\n                               GLsizei width, GLsizei height, GLenum format,\n                               [AllowShared] ArrayBufferView srcData,\n                               optional GLuint srcOffset = 0,\n                               optional GLuint srcLengthOverride = 0);\n\n  void uniform1fv(WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0,\n                  optional GLuint srcLength = 0);\n  void uniform2fv(WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0,\n                  optional GLuint srcLength = 0);\n  void uniform3fv(WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0,\n                  optional GLuint srcLength = 0);\n  void uniform4fv(WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0,\n                  optional GLuint srcLength = 0);\n\n  void uniform1iv(WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0,\n                  optional GLuint srcLength = 0);\n  void uniform2iv(WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0,\n                  optional GLuint srcLength = 0);\n  void uniform3iv(WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0,\n                  optional GLuint srcLength = 0);\n  void uniform4iv(WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0,\n                  optional GLuint srcLength = 0);\n\n  void uniformMatrix2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\n                        optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\n  void uniformMatrix3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\n                        optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\n  void uniformMatrix4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\n                        optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\n\n  /* Reading back pixels */\n  // WebGL1:\n  void readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type,\n                  [AllowShared] ArrayBufferView? dstData);\n  // WebGL2:\n  void readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type,\n                  GLintptr offset);\n  void readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type,\n                  [AllowShared] ArrayBufferView dstData, GLuint dstOffset);\n};"
  },
  "extended": [],
  "inheritance": null,
  "includes": []
}