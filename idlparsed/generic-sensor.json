{
  "spec": {
    "title": "Generic Sensor API",
    "url": "https://w3c.github.io/sensors/"
  },
  "idlparsed": {
    "jsNames": {
      "constructors": {
        "DedicatedWorker": [
          "SensorErrorEvent"
        ],
        "Window": [
          "SensorErrorEvent"
        ]
      },
      "functions": {
        "DedicatedWorker": [
          "Sensor"
        ],
        "Window": [
          "Sensor"
        ]
      }
    },
    "idlNames": {
      "Sensor": {
        "fragment": "[SecureContext, Exposed=(DedicatedWorker, Window)]\ninterface Sensor : EventTarget {\n  readonly attribute boolean activated;\n  readonly attribute boolean hasReading;\n  readonly attribute DOMHighResTimeStamp? timestamp;\n  undefined start();\n  undefined stop();\n  attribute EventHandler onreading;\n  attribute EventHandler onactivate;\n  attribute EventHandler onerror;\n};",
        "type": "interface",
        "name": "Sensor",
        "inheritance": "EventTarget",
        "members": [
          {
            "type": "attribute",
            "name": "activated",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "hasReading",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "attribute",
            "name": "timestamp",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "DOMHighResTimeStamp"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          },
          {
            "type": "operation",
            "name": "start",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "operation",
            "name": "stop",
            "idlType": {
              "type": "return-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "undefined"
            },
            "arguments": [],
            "extAttrs": [],
            "special": ""
          },
          {
            "type": "attribute",
            "name": "onreading",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onactivate",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          },
          {
            "type": "attribute",
            "name": "onerror",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "EventHandler"
            },
            "extAttrs": [],
            "special": "",
            "readonly": false
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier-list",
              "value": [
                {
                  "value": "DedicatedWorker"
                },
                {
                  "value": "Window"
                }
              ]
            },
            "arguments": []
          }
        ],
        "partial": false
      },
      "SensorOptions": {
        "fragment": "dictionary SensorOptions {\n  double frequency;\n};",
        "type": "dictionary",
        "name": "SensorOptions",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "frequency",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "SensorErrorEvent": {
        "fragment": "[SecureContext, Exposed=(DedicatedWorker, Window)]\ninterface SensorErrorEvent : Event {\n  constructor(DOMString type, SensorErrorEventInit errorEventInitDict);\n  readonly attribute DOMException error;\n};",
        "type": "interface",
        "name": "SensorErrorEvent",
        "inheritance": "Event",
        "members": [
          {
            "type": "constructor",
            "arguments": [
              {
                "type": "argument",
                "name": "type",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "DOMString"
                },
                "default": null,
                "optional": false,
                "variadic": false
              },
              {
                "type": "argument",
                "name": "errorEventInitDict",
                "extAttrs": [],
                "idlType": {
                  "type": "argument-type",
                  "extAttrs": [],
                  "generic": "",
                  "nullable": false,
                  "union": false,
                  "idlType": "SensorErrorEventInit"
                },
                "default": null,
                "optional": false,
                "variadic": false
              }
            ],
            "extAttrs": []
          },
          {
            "type": "attribute",
            "name": "error",
            "idlType": {
              "type": "attribute-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMException"
            },
            "extAttrs": [],
            "special": "",
            "readonly": true
          }
        ],
        "extAttrs": [
          {
            "type": "extended-attribute",
            "name": "SecureContext",
            "rhs": null,
            "arguments": []
          },
          {
            "type": "extended-attribute",
            "name": "Exposed",
            "rhs": {
              "type": "identifier-list",
              "value": [
                {
                  "value": "DedicatedWorker"
                },
                {
                  "value": "Window"
                }
              ]
            },
            "arguments": []
          }
        ],
        "partial": false
      },
      "SensorErrorEventInit": {
        "fragment": "dictionary SensorErrorEventInit : EventInit {\n  required DOMException error;\n};",
        "type": "dictionary",
        "name": "SensorErrorEventInit",
        "inheritance": "EventInit",
        "members": [
          {
            "type": "field",
            "name": "error",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "DOMException"
            },
            "default": null,
            "required": true
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "MockSensorConfiguration": {
        "fragment": "dictionary MockSensorConfiguration {\n  required MockSensorType mockSensorType;\n  boolean connected = true;\n  double? maxSamplingFrequency;\n  double? minSamplingFrequency;\n};",
        "type": "dictionary",
        "name": "MockSensorConfiguration",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "mockSensorType",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "MockSensorType"
            },
            "default": null,
            "required": true
          },
          {
            "type": "field",
            "name": "connected",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "boolean"
            },
            "default": {
              "type": "boolean",
              "value": true
            },
            "required": false
          },
          {
            "type": "field",
            "name": "maxSamplingFrequency",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "double"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "minSamplingFrequency",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": true,
              "union": false,
              "idlType": "double"
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "MockSensor": {
        "fragment": "dictionary MockSensor {\n  double maxSamplingFrequency;\n  double minSamplingFrequency;\n  double requestedSamplingFrequency;\n};",
        "type": "dictionary",
        "name": "MockSensor",
        "inheritance": null,
        "members": [
          {
            "type": "field",
            "name": "maxSamplingFrequency",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "minSamplingFrequency",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": null,
            "required": false
          },
          {
            "type": "field",
            "name": "requestedSamplingFrequency",
            "extAttrs": [],
            "idlType": {
              "type": "dictionary-type",
              "extAttrs": [],
              "generic": "",
              "nullable": false,
              "union": false,
              "idlType": "double"
            },
            "default": null,
            "required": false
          }
        ],
        "extAttrs": [],
        "partial": false
      },
      "MockSensorType": {
        "fragment": "enum MockSensorType {\n  \"ambient-light\",\n  \"accelerometer\",\n  \"linear-acceleration\",\n  \"gravity\",\n  \"gyroscope\",\n  \"magnetometer\",\n  \"uncalibrated-magnetometer\",\n  \"absolute-orientation\",\n  \"relative-orientation\",\n  \"geolocation\",\n  \"proximity\",\n};",
        "type": "enum",
        "name": "MockSensorType",
        "values": [
          {
            "type": "enum-value",
            "value": "ambient-light"
          },
          {
            "type": "enum-value",
            "value": "accelerometer"
          },
          {
            "type": "enum-value",
            "value": "linear-acceleration"
          },
          {
            "type": "enum-value",
            "value": "gravity"
          },
          {
            "type": "enum-value",
            "value": "gyroscope"
          },
          {
            "type": "enum-value",
            "value": "magnetometer"
          },
          {
            "type": "enum-value",
            "value": "uncalibrated-magnetometer"
          },
          {
            "type": "enum-value",
            "value": "absolute-orientation"
          },
          {
            "type": "enum-value",
            "value": "relative-orientation"
          },
          {
            "type": "enum-value",
            "value": "geolocation"
          },
          {
            "type": "enum-value",
            "value": "proximity"
          }
        ],
        "extAttrs": []
      },
      "MockSensorReadingValues": {
        "fragment": "dictionary MockSensorReadingValues {\n};",
        "type": "dictionary",
        "name": "MockSensorReadingValues",
        "inheritance": null,
        "members": [],
        "extAttrs": [],
        "partial": false
      }
    },
    "idlExtendedNames": {},
    "globals": {},
    "exposed": {
      "DedicatedWorker": [
        "Sensor",
        "SensorErrorEvent"
      ],
      "Window": [
        "Sensor",
        "SensorErrorEvent"
      ]
    },
    "dependencies": {
      "Sensor": [
        "EventTarget",
        "DOMHighResTimeStamp",
        "EventHandler"
      ],
      "SensorOptions": [],
      "SensorErrorEvent": [
        "Event",
        "SensorErrorEventInit"
      ],
      "SensorErrorEventInit": [
        "EventInit"
      ],
      "MockSensorConfiguration": [
        "MockSensorType"
      ],
      "MockSensor": [],
      "MockSensorReadingValues": []
    },
    "externalDependencies": [
      "EventTarget",
      "DOMHighResTimeStamp",
      "EventHandler",
      "Event",
      "EventInit"
    ],
    "hasObsoleteIdl": false
  }
}